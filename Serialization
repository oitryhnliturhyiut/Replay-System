local module = {}

local Properties = {
	Part = {"Name", "Position", "Size", "Transparency", "BrickColor","Shape", "Material", "Rotation","CastShadow","Orientation"},
	Decal = {"Name", "Texture", "Transparency", "Face", "Color3"},
	Humanoid = {"DisplayName","RigType"},
	Model = {"Name"},
	SpecialMesh = {"Name","MeshId","TextureId","Scale","Offset","VertexColor"},
	UnionOperation = {"Name","UsePartColor","SmoothingAngle","BrickColor","CastShadow","Material","Position","Rotation","Size","Transparency"},
	WedgePart = {"Name","BrickColor","CastShadow","Material","Position","Rotation","Size","Transparency"},
	CylinderMesh = {"Name", "Offset", "Scale", "VertexColor"},
	Weld = {"Name","Part1"},
	LocalScript = {"Name"},
	Script = {"Name}
}

local function Serialize(prop)
	local type  =typeof(prop)
	local r

	if (type == "BrickColor") then
		r = tostring(prop)
	elseif (type == "CFrame") then
		r = {pos = Serialize(prop.Position), rX = Serialize(prop.rightVector), ry  =Serialize(prop.upVector), rZ = Serialize(-prop.lookVector)}
	elseif (type == "Vector3") then
		r = {X = prop.X, Y = prop.Y, Z = prop.Z}
	elseif (type == "Color3") then
		r = {prop:ToHSV()}
	elseif (type == "EnumItem") then
		r = {string.split(tostring(prop), ".")[2], string.split(tostring(prop), ".")[3]}
	elseif (type == "Instance" or type == "BrickPart") then
		r = prop.Name
	else
		r = prop
	end
	return r
end

local function InitProps(objects)
	local tableToSave = {}
	for _, obj in pairs(objects) do
		local class = obj.ClassName
		local t = tableToSave[class]
		if not(t) then
			tableToSave[class] = {}
			t = tableToSave[class]
		end
		local add = {}
		if not (Properties[obj.ClassName]) then
			break
		end
		for _, Prop in pairs(Properties[obj.ClassName]) do
			add[Prop] = Serialize(obj[Prop])
		end
		local children = obj:GetChildren() --the children
		if #children > 0 then --if it has them
			add["Children"] = InitProps(children) --initiate the children
		end
		table.insert(t, add)
	end
	return tableToSave
end

local function Deserialize(prop, value)
	local r --this will be the returned deserialized property

	if prop == "Position" or prop == "Size" or prop == "Vector3" or prop == "Offset" or prop == "Scale" or prop == "VertexColor" or prop == "Rotation" or prop == "Orientation" then
		r = Vector3.new(value.X, value.Y, value.Z)
	elseif prop == "CFrame" then
		r = CFrame.fromMatrix(Deserialize("Position", value.pos), Deserialize("Position", value.rX), Deserialize("Position", value.rY), Deserialize("Position", value.rZ))
	elseif prop == "BrickColor" then
		r = BrickColor.new(value)
	elseif prop == "Color" or prop == "Color3" then
		r = Color3.fromHSV(unpack(value))
	elseif prop == "Material" or prop == "Face" or prop == "Shape" or prop == "RigType" then --you probably have to fill this one depending on the properties you're saving!
		r = Enum[value[1]][value[2]]
	else
		r = value --it gets here if the property 
	end
	return r --return it
end

local function Create(parent, t)
	local welds = {}
	local topObject
	
	for class, _ in pairs(t) do --loop through classes, notice how I want class which is the key, I don't need the value so I do _
		for _, obj in pairs(t[class]) do --loop through class's serialized objects
			if not (class == "LocalScript" or class == "Script") then
				local object = Instance.new(class) --create the new object with the wanted class
				local success = pcall(function()
					local t = object["Anchored"]
				end)

				if (success) then
					object.Anchored = true
				end

				if not (topObject) then
					topObject = object
				end
				for prop, value in pairs(obj) do --loop through the serialized object's props and values
					if prop ~= "Children" then --we need to check if the current key inside of the serialized table is not the Children table
						if (prop == "Part1") then
							table.insert(welds,{Object = object, Part1 = value})
						else
							object[prop] = Deserialize(prop, value) --do the magic
						end
					else
						local data = Create(object, value) --if it is the Children table, take care of it
						for i,v in ipairs(data["Welds"]) do
							table.insert(welds,v)
						end
					end
				end
				if (parent) then
					object.Parent = parent --parent it to the parent
					if (object:IsA("Weld")) then
						object.Part0 = parent
					end
				end
			end
		end
	end
	return {Object = topObject, Welds = welds}
end

function module.Encode(objects)

	if not (typeof(objects) == "table") then
		objects = {objects}
	end
	return InitProps(objects)
end

local function setWeld(weld, objectName, parentObject)
	for i,v in ipairs(parentObject:GetChildren()) do
		if (v:IsA("BasePart") and v.Name == objectName) then
			weld.Part1 = v
		elseif (#v:GetChildren() > 0) then
			setWeld(weld,objectName,v)
		end
	end
end

function module.Decode(t, slot)
	local data = Create(slot, t)
	local instance = data["Object"]
	local welds = data["Welds"]
	
	
	
	if (#welds > 0) then
		for i,v in ipairs(welds) do
			local weld = v["Object"]
			local Part1 = v["Part1"]
			
			setWeld(weld,Part1,instance)
		end
	end
	return instance
end

return module
